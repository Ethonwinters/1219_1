import os
import shutil

# 定义源文件夹路径
input_folder = r'C:\Users\wang.zhuo17\V1\test\input'
target_folder = r'C:\Users\wang.zhuo17\V1\test\target'
destination_folder = r'C:\Users\wang.zhuo17\V1\test'

# 定义一个函数来剪切并移动文件
def move_files(source_folder, destination_folder):
    # 获取源文件夹中的所有文件
    for filename in os.listdir(source_folder):
        file_path = os.path.join(source_folder, filename)
        # 如果是文件，则剪切并移动到目标文件夹
        if os.path.isfile(file_path):
            shutil.move(file_path, os.path.join(destination_folder, filename))
            print(f'文件 {filename} 已移动到 {destination_folder}')

# 移动 input 和 target 文件夹中的文件
move_files(input_folder, destination_folder)
move_files(target_folder, destination_folder)

print("所有文件已成功移动！")


import torch
from sklearn.metrics import r2_score

# 假设你的张量如下：
output_tensor_reverse = torch.randn(1, 20, 20)  # 真实值
Predicted_output_reverse = torch.randn(1, 20, 20)  # 预测值

# 扁平化张量
y_true = output_tensor_reverse.view(-1).cpu().numpy()  # 真实值，转为numpy数组
y_pred = Predicted_output_reverse.view(-1).cpu().numpy()  # 预测值，转为numpy数组

# 计算 R²
r2 = r2_score(y_true, y_pred)
print(f"R²: {r2}")



import torch

# 假设你的张量如下：
output_tensor_reverse = torch.randn(1, 20, 20)  # 真实值
Predicted_output_reverse = torch.randn(1, 20, 20)  # 预测值

# 扁平化张量
y_true = output_tensor_reverse.view(-1)  # 真实值
y_pred = Predicted_output_reverse.view(-1)  # 预测值

# 计算均值
y_mean = y_true.mean()

# 计算R²
ss_total = torch.sum((y_true - y_mean) ** 2)  # 总平方和
ss_residual = torch.sum((y_true - y_pred) ** 2)  # 残差平方和

r2 = 1 - (ss_residual / ss_total)  # R²公式
print(f"R²: {r2.item()}")
