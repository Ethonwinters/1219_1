🍕🍔🍟🌭🍿🧂🥓🥚🥯🥨🥐🍞🧈🥞🧇🍳🥖🧀🥗🥙🥙🥪🍱🍣🥠🦪🍜🥟🥩🍛🍠🍚🍙🍗🍘🍖
import os
import shutil

# 定义源文件夹路径
input_folder = r'C:\Users\wang.zhuo17\V1\test\input'
target_folder = r'C:\Users\wang.zhuo17\V1\test\target'
destination_folder = r'C:\Users\wang.zhuo17\V1\test'

# 定义一个函数来剪切并移动文件
def move_files(source_folder, destination_folder):
    # 获取源文件夹中的所有文件
    for filename in os.listdir(source_folder):
        file_path = os.path.join(source_folder, filename)
        # 如果是文件，则剪切并移动到目标文件夹
        if os.path.isfile(file_path):
            shutil.move(file_path, os.path.join(destination_folder, filename))
            print(f'文件 {filename} 已移动到 {destination_folder}')

# 移动 input 和 target 文件夹中的文件
move_files(input_folder, destination_folder)
move_files(target_folder, destination_folder)

print("所有文件已成功移动！")
🍕🍔🍟🌭🍿🧂🥓🥚🥯🥨🥐🍞🧈🥞🧇🍳🥖🧀🥗🥙🥙🥪🍱🍣🥠🦪🍜🥟🥩🍛🍠🍚🍙🍗🍘🍖
import torch
from sklearn.metrics import r2_score

# 假设你的张量如下：
output_tensor_reverse = torch.randn(1, 20, 20)  # 真实值
Predicted_output_reverse = torch.randn(1, 20, 20)  # 预测值

# 扁平化张量
y_true = output_tensor_reverse.view(-1).cpu().numpy()  # 真实值，转为numpy数组
y_pred = Predicted_output_reverse.view(-1).cpu().numpy()  # 预测值，转为numpy数组

# 计算 R²
r2 = r2_score(y_true, y_pred)
print(f"R²: {r2}")
🍕🍔🍟🌭🍿🧂🥓🥚🥯🥨🥐🍞🧈🥞🧇🍳🥖🧀🥗🥙🥙🥪🍱🍣🥠🦪🍜🥟🥩🍛🍠🍚🍙🍗🍘🍖
# 假设你的张量如下：
output_tensor_reverse = torch.randn(1, 20, 20)  # 真实值
Predicted_output_reverse = torch.randn(1, 20, 20)  # 预测值

# 扁平化张量
y_true = output_tensor_reverse.view(-1)  # 真实值
y_pred = Predicted_output_reverse.view(-1)  # 预测值

# 计算均值
y_mean = y_true.mean()

# 计算R²
ss_total = torch.sum((y_true - y_mean) ** 2)  # 总平方和
ss_residual = torch.sum((y_true - y_pred) ** 2)  # 残差平方和

r2 = 1 - (ss_residual / ss_total)  # R²公式
print(f"R²: {r2.item()}")
🍕🍔🍟🌭🍿🧂🥓🥚🥯🥨🥐🍞🧈🥞🧇🍳🥖🧀🥗🥙🥙🥪🍱🍣🥠🦪🍜🥟🥩🍛🍠🍚🍙🍗🍘🍖

test_loader_iter = DataLoader(dataset=test_dataset_, batch_size=256, shuffle=False,drop_last=True)   看每个batch的文件名

# Step 2: Load the best model state
best_model = torch.load('best_model.pth')

# Step 3: Load state dict into the model
net.load_state_dict(best_model)

# Step 4: Set the model to evaluation mode
net.eval()

# Step 5: Evaluate on the test set
test_loss = 0.0

with torch.no_grad():
    for X_test, y_test in test_loader_iter:
        outputs = net(X_test)
        test_loss += loss(outputs, y_test).item() * X_test.size(0)

# Calculate average test loss
test_loss = test_loss / len(test_loader_iter.dataset)

print(f'Test Loss: {test_loss:.4f}')  这样输出的是第几个batch



🍕🍔🍟🌭🍿🧂🥓🥚🥯🥨🥐🍞🧈🥞🧇🍳🥖🧀🥗🥙🥙🥪🍱🍣🥠🦪🍜🥟🥩🍛🍠🍚🍙🍗🍘🍖
best_model = torch.load('best_model_1_1.pth')  
net.load_state_dict(best_model)  
net.eval()  

# Step 2: 加载 input{i}.pt 和 target{i}.pt 文件夹中的所有文件
test_folder = r'C:\Users\wang.zhuo17\ENGINE_normalized_data_shuffled\test'  # 输入文件所在目录
input_files = sorted([f for f in os.listdir(test_folder) if f.startswith('input') and f.endswith('.pt')])  # 查找所有 input{i}.pt 文件
target_files = sorted([f for f in os.listdir(test_folder) if f.startswith('output') and f.endswith('.pt')])  # 查找所有 target{i}.pt 文件

# Step 3: 只处理前 600 个文件
input_files = input_files[:600]  # 只选择前 600 个 input 文件
target_files = target_files[:600]  # 只选择前 600 个 target 文件

# Step 4: 初始化保存结果的列表
A_values = []  # 用于存储 A 值
predicted_outputs = []  # 用于存储预测结果
true_outputs = []  # 用于存储真实结果

# Step 5: 逐个加载 input 和 target 文件，进行预测并计算 A
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
net.to(device)  # 确保模型在正确的设备上

for input_file, target_file in zip(input_files, target_files):
    # 加载输入和目标张量
    input_tensor = torch.load(os.path.join(test_folder, input_file)).to(device)
    output_tensor = torch.load(os.path.join(test_folder, target_file)).to(device)
    
    # 进行预测
    with torch.no_grad():
        predicted_output = (net(input_tensor.unsqueeze(0) * target_std)) + target_mean  # 预测结果
        output_tensor = output_tensor * target_std + target_mean  # 转换目标张量到原始尺度
    
    # 计算 A 值
    A = (output_tensor - predicted_output) / output_tensor  # A 计算公式

    # 将预测结果、真实结果和 A 值转回 CPU 并转为 NumPy 数组 (去除 batch 维度)
    predicted_outputs.append(predicted_output.squeeze().cpu().numpy())  # 去掉 batch 维度，得到 (20, 20)
    true_outputs.append(output_tensor.squeeze().cpu().numpy())  # 去掉 batch 维度，得到 (20, 20)
    A_values.append(A.squeeze().cpu().numpy())  # 计算 A 值，并去掉 batch 维度，得到 (20, 20)

# Step 6: 将结果转换为 NumPy 数组，形状应为 (600, 20, 20)
predicted_outputs = np.array(predicted_outputs)  # 形状为 (600, 20, 20)
true_outputs = np.array(true_outputs)  # 形状为 (600, 20, 20)
A_matrix = np.array(A_values)  # 形状为 (600, 20, 20)

# 打印输出的形状
print(f"Predicted outputs shape: {predicted_outputs.shape}")  # 打印预测输出的形状
print(f"True outputs shape: {true_outputs.shape}")  # 打印真实输出的形状
print(f"A matrix shape: {A_matrix.shape}")  # 打印 A 的形状

# Step 7: 输出最后一个预测结果和真实结果
print(f"Last predicted_output: {predicted_outputs[-1]}")  # 打印最后一个预测结果
print(f"Last true output_tensor: {true_outputs[-1]}")  # 打印最后一个真实结果
print(f"Last A: {A_matrix[-1]}")  # 打印最后一个 A 值
