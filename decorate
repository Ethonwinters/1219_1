import os
import shutil

# 定义源文件夹路径
input_folder = r'C:\Users\wang.zhuo17\V1\test\input'
target_folder = r'C:\Users\wang.zhuo17\V1\test\target'
destination_folder = r'C:\Users\wang.zhuo17\V1\test'

# 定义一个函数来剪切并移动文件
def move_files(source_folder, destination_folder):
    # 获取源文件夹中的所有文件
    for filename in os.listdir(source_folder):
        file_path = os.path.join(source_folder, filename)
        # 如果是文件，则剪切并移动到目标文件夹
        if os.path.isfile(file_path):
            shutil.move(file_path, os.path.join(destination_folder, filename))
            print(f'文件 {filename} 已移动到 {destination_folder}')

# 移动 input 和 target 文件夹中的文件
move_files(input_folder, destination_folder)
move_files(target_folder, destination_folder)

print("所有文件已成功移动！")


import torch
from sklearn.metrics import r2_score

# 假设你的张量如下：
output_tensor_reverse = torch.randn(1, 20, 20)  # 真实值
Predicted_output_reverse = torch.randn(1, 20, 20)  # 预测值

# 扁平化张量
y_true = output_tensor_reverse.view(-1).cpu().numpy()  # 真实值，转为numpy数组
y_pred = Predicted_output_reverse.view(-1).cpu().numpy()  # 预测值，转为numpy数组

# 计算 R²
r2 = r2_score(y_true, y_pred)
print(f"R²: {r2}")



import torch

# 假设你的张量如下：
output_tensor_reverse = torch.randn(1, 20, 20)  # 真实值
Predicted_output_reverse = torch.randn(1, 20, 20)  # 预测值

# 扁平化张量
y_true = output_tensor_reverse.view(-1)  # 真实值
y_pred = Predicted_output_reverse.view(-1)  # 预测值

# 计算均值
y_mean = y_true.mean()

# 计算R²
ss_total = torch.sum((y_true - y_mean) ** 2)  # 总平方和
ss_residual = torch.sum((y_true - y_pred) ** 2)  # 残差平方和

r2 = 1 - (ss_residual / ss_total)  # R²公式
print(f"R²: {r2.item()}")



import torch
import os
import numpy as np

# Step 1: 加载训练好的模型
best_model = torch.load('best_model_1_1.pth')  # 假设 'best_model.pth' 是你保存的最佳模型
net.load_state_dict(best_model)  # 将模型参数加载到模型中
net.eval()  # 设置模型为评估模式

# Step 2: 加载 input{i}.pt 和 target{i}.pt 文件夹中的所有文件
test_folder = r'C:\Users\wang.zhuo17\ENGINE_normalized_data_shuffled\test'  # 输入文件所在目录
input_files = sorted([f for f in os.listdir(test_folder) if f.startswith('input') and f.endswith('.pt')])  # 查找所有 input{i}.pt 文件
target_files = sorted([f for f in os.listdir(test_folder) if f.startswith('target') and f.endswith('.pt')])  # 查找所有 target{i}.pt 文件

# Step 3: 初始化用于保存所有计算结果的列表
A_values = []  # 用于存储所有 A 值

# Step 4: 逐个加载 input 和 target 文件，进行预测并计算 A
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
net.to(device)  # 确保模型在正确的设备上

for input_file, target_file in zip(input_files, target_files):
    # 加载输入和目标张量
    input_tensor = torch.load(os.path.join(test_folder, input_file)).to(device)
    output_tensor = torch.load(os.path.join(test_folder, target_file)).to(device)
    
    # 进行预测
    with torch.no_grad():
        predicted_output = (net(input_tensor.unsqueeze(0)) * target_std) + target_mean  # 预测结果
        output_tensor = output_tensor * target_std + target_mean  # 转换目标张量到原始尺度
    
    # 计算 A 值
    A = (output_tensor - predicted_output) / output_tensor
    A_values.append(A.cpu().numpy())  # 将 A 添加到列表中并转回 CPU

# Step 5: 转换 A_values 为 NumPy 数组，方便后续分析
A_matrix = np.array(A_values)

# 打印或保存结果
print(f"A matrix shape: {A_matrix.shape}")  # 打印 A 的维度

# 如果你需要保存到文件中，可以使用 numpy 保存到文件：
np.save('A_matrix.npy', A_matrix)  # 将 A 保存为 numpy 格式

# 也可以打印或分析矩阵 A 中的统计信息：
print(f"Mean of A: {A_matrix.mean()}")
print(f"Standard Deviation of A: {A_matrix.std()}")
